FUNCTION FC301 : VOID
TITLE = 'Robot Communication Handler'
VERSION : 1.0

VAR_INPUT
  Command : WORD ;                        // Command to execute
  Area : WORD ;                           // Area number
  SetNumber : WORD ;                      // Set number
  Enable : BOOL ;                         // Enable function
  Reset : BOOL ;                          // Reset function
END_VAR

VAR_OUTPUT
  Success : BOOL ;                        // Success flag
  ErrorCode : WORD ;                      // Error code
  RobotBusy : BOOL ;                      // Robot busy flag
END_VAR

VAR_TEMP
  CoordValid : BOOL ;                     // Coordinate validation result
  RobotReady : BOOL ;                     // Robot ready flag
  MotionComplete : BOOL ;                 // Motion completion flag
  TimeoutCounter : WORD ;                 // Timeout counter
  TempX : DINT ;                          // Temporary X coordinate
  TempY : DINT ;                          // Temporary Y coordinate
  TempZ : DINT ;                          // Temporary Z coordinate
  TempRX : INT ;                          // Temporary RX rotation
  TempRY : INT ;                          // Temporary RY rotation
  TempRZ : INT ;                          // Temporary RZ rotation
  TempGripper : WORD ;                    // Temporary gripper command
  TempSpeed : WORD ;                      // Temporary speed
END_VAR

VAR_STATIC
  LastCommand : WORD ;                    // Last executed command
  CommandTimer : WORD ;                   // Command execution timer
  RetryCounter : WORD ;                   // Retry counter
  RobotTimeout : WORD ;                   // Robot timeout counter
END_VAR

BEGIN
// =======================================================================
// FUNCTION FC301 - ROBOT COMMUNICATION HANDLER
// =======================================================================
// Description: Handles communication protocol with robot
// Called from: FC300 (Laptop Handler)
// Execution: State machine with timeout handling
// =======================================================================

// Initialize outputs
#Success := FALSE ;
#ErrorCode := 0 ;
#RobotBusy := FALSE ;

// Check if function is enabled
IF NOT #Enable THEN
  RETURN ;
END_IF ;

// Reset function if requested
IF #Reset THEN
  DB101.RobotCommand := 0 ;
  #LastCommand := 0 ;
  #CommandTimer := 0 ;
  #RetryCounter := 0 ;
  #RobotTimeout := 0 ;
  RETURN ;
END_IF ;

// -----------------------------------------------------------------------
// ROBOT STATUS MONITORING
// -----------------------------------------------------------------------

// Check robot ready status
#RobotReady := (DB101.RobotStatus = 0) OR (DB101.RobotStatus = 9) ;

// Update timeout counter
IF DB101.RobotStatus = 1 THEN          // Robot moving
  #RobotTimeout := #RobotTimeout + 1 ;
  IF #RobotTimeout > 3000 THEN         // 30 seconds timeout
    #ErrorCode := 2002 ;               // Robot timeout error
    RETURN ;
  END_IF ;
ELSE
  #RobotTimeout := 0 ;
END_IF ;

// -----------------------------------------------------------------------
// COMMAND PROCESSING
// -----------------------------------------------------------------------

CASE #Command OF

  // Execute coordinate set command
  1:
    IF #RobotReady THEN
      // Read coordinate set from storage
      IF #Area = 1 THEN
        IF (#SetNumber >= 1) AND (#SetNumber <= 10) THEN
          #TempX := DB102.Area1_CoordinateSets[#SetNumber].X_Position ;
          #TempY := DB102.Area1_CoordinateSets[#SetNumber].Y_Position ;
          #TempZ := DB102.Area1_CoordinateSets[#SetNumber].Z_Position ;
          #TempRX := DB102.Area1_CoordinateSets[#SetNumber].RX_Rotation ;
          #TempRY := DB102.Area1_CoordinateSets[#SetNumber].RY_Rotation ;
          #TempRZ := DB102.Area1_CoordinateSets[#SetNumber].RZ_Rotation ;
          #TempGripper := DB102.Area1_CoordinateSets[#SetNumber].GripperCommand ;
          #TempSpeed := DB102.Area1_CoordinateSets[#SetNumber].SpeedSetting ;
          #CoordValid := (DB102.Area1_CoordinateSets[#SetNumber].ValidationFlag = 1) ;
        ELSE
          #CoordValid := FALSE ;
        END_IF ;
      ELSIF #Area = 2 THEN
        IF (#SetNumber >= 1) AND (#SetNumber <= 10) THEN
          #TempX := DB102.Area2_CoordinateSets[#SetNumber].X_Position ;
          #TempY := DB102.Area2_CoordinateSets[#SetNumber].Y_Position ;
          #TempZ := DB102.Area2_CoordinateSets[#SetNumber].Z_Position ;
          #TempRX := DB102.Area2_CoordinateSets[#SetNumber].RX_Rotation ;
          #TempRY := DB102.Area2_CoordinateSets[#SetNumber].RY_Rotation ;
          #TempRZ := DB102.Area2_CoordinateSets[#SetNumber].RZ_Rotation ;
          #TempGripper := DB102.Area2_CoordinateSets[#SetNumber].GripperCommand ;
          #TempSpeed := DB102.Area2_CoordinateSets[#SetNumber].SpeedSetting ;
          #CoordValid := (DB102.Area2_CoordinateSets[#SetNumber].ValidationFlag = 1) ;
        ELSE
          #CoordValid := FALSE ;
        END_IF ;
      ELSE
        #CoordValid := FALSE ;
      END_IF ;
      
      IF #CoordValid THEN
        // Send move command to robot
        DB101.RobotCommand := 1 ;         // Move to position command
        DB101.CurrentArea := #Area ;
        DB101.CurrentSet := #SetNumber ;
        
        // Update coordinate data in robot interface
        DB101.CurrentX := #TempX ;
        DB101.CurrentY := #TempY ;
        DB101.CurrentZ := #TempZ ;
        DB101.CurrentRX := #TempRX ;
        DB101.CurrentRY := #TempRY ;
        DB101.CurrentRZ := #TempRZ ;
        DB101.GripperFeedback := #TempGripper ;
        DB101.CurrentSpeed := #TempSpeed ;
        
        // Update system status
        DB102.SystemStatus.LastAccessedArea := #Area ;
        DB102.SystemStatus.LastAccessedSet := #SetNumber ;
        DB102.SystemStatus.AccessCounter := DB102.SystemStatus.AccessCounter + 1 ;
        
        // Check if motion is complete
        IF DB101.RobotStatus = 2 THEN     // Position reached
          DB101.RobotCommand := 0 ;       // Clear command
          DB102.SystemStatus.SuccessfulCommands := DB102.SystemStatus.SuccessfulCommands + 1 ;
          #Success := TRUE ;
        ELSE
          #RobotBusy := TRUE ;
        END_IF ;
        
      ELSE
        #ErrorCode := 3001 ;              // Invalid coordinate set
      END_IF ;
    ELSE
      #RobotBusy := TRUE ;
      #ErrorCode := 2001 ;                // Robot not ready
    END_IF ;

  // Stop motion command
  2:
    DB101.RobotCommand := 5 ;             // Stop motion command
    
    // Wait for robot to acknowledge stop
    IF DB101.RobotStatus = 0 THEN         // Robot stopped
      DB101.RobotCommand := 0 ;           // Clear command
      #Success := TRUE ;
    ELSE
      #RobotBusy := TRUE ;
    END_IF ;

  // Reset robot command
  3:
    DB101.RobotCommand := 6 ;             // Reset robot command
    
    // Wait for robot to reset
    IF DB101.RobotStatus = 0 THEN         // Robot idle
      DB101.RobotCommand := 0 ;           // Clear command
      DB101.RobotErrorCode := 0 ;         // Clear error code
      #Success := TRUE ;
    ELSE
      #RobotBusy := TRUE ;
    END_IF ;

  // Home position command
  4:
    IF #RobotReady THEN
      DB101.RobotCommand := 7 ;           // Home position command
      
      // Wait for homing to complete
      IF DB101.RobotStatus = 2 THEN       // Position reached
        DB101.RobotCommand := 0 ;         // Clear command
        #Success := TRUE ;
      ELSE
        #RobotBusy := TRUE ;
      END_IF ;
    ELSE
      #RobotBusy := TRUE ;
      #ErrorCode := 2001 ;                // Robot not ready
    END_IF ;

  // Get current position command
  5:
    DB101.RobotCommand := 2 ;             // Get current position
    
    // Command is immediate, no waiting required
    #Success := TRUE ;
    DB101.RobotCommand := 0 ;             // Clear command

  // Set gripper command
  6:
    IF #RobotReady THEN
      IF #SetNumber = 1 THEN
        DB101.RobotCommand := 4 ;         // Close gripper
      ELSE
        DB101.RobotCommand := 3 ;         // Open gripper
      END_IF ;
      
      // Wait for gripper operation to complete
      IF (DB101.RobotStatus = 7) OR (DB101.RobotStatus = 8) THEN
        #RobotBusy := TRUE ;
      ELSE
        DB101.RobotCommand := 0 ;         // Clear command
        #Success := TRUE ;
      END_IF ;
    ELSE
      #RobotBusy := TRUE ;
      #ErrorCode := 2001 ;                // Robot not ready
    END_IF ;

  // Emergency stop command
  7:
    DB101.RobotCommand := 9 ;             // Emergency stop
    #Success := TRUE ;                    // Immediate command

  // Default case
  ELSE:
    #ErrorCode := 3000 ;                  // Unknown robot command

END_CASE ;

// -----------------------------------------------------------------------
// ERROR HANDLING AND DIAGNOSTICS
// -----------------------------------------------------------------------

// Handle robot errors
IF DB101.RobotErrorCode <> 0 THEN
  DB102.SystemStatus.ErrorCounter := DB102.SystemStatus.ErrorCounter + 1 ;
  DB102.SystemStatus.FailedCommands := DB102.SystemStatus.FailedCommands + 1 ;
  #ErrorCode := DB101.RobotErrorCode ;
  
  // Auto-retry mechanism for certain errors
  IF #ErrorCode < 5000 THEN              // Recoverable errors
    #RetryCounter := #RetryCounter + 1 ;
    IF #RetryCounter < 3 THEN
      DB101.RobotCommand := 6 ;           // Try reset
      #RetryCounter := 0 ;
    END_IF ;
  END_IF ;
END_IF ;

// Update diagnostic counters
DB101.CycleCounter := DB101.CycleCounter + 1 ;

// Update execution time tracking
IF #Success THEN
  DB101.ExecutionTime := #CommandTimer ;
  
  // Update average execution time
  IF DB101.AverageExecutionTime = 0 THEN
    DB101.AverageExecutionTime := #CommandTimer ;
  ELSE
    DB101.AverageExecutionTime := (DB101.AverageExecutionTime + #CommandTimer) / 2 ;
  END_IF ;
  
  // Update maximum execution time
  IF #CommandTimer > DB101.MaxExecutionTime THEN
    DB101.MaxExecutionTime := #CommandTimer ;
  END_IF ;
  
  #CommandTimer := 0 ;
ELSE
  #CommandTimer := #CommandTimer + 1 ;
END_IF ;

// Store last command
#LastCommand := #Command ;

END_FUNCTION
